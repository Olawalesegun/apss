// <auto-generated />
using System;
using APSS.Infrastructure.Repositores.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APSS.Infrastructure.Repositories.EntityFramework.Migrations
{
    [DbContext(typeof(ApssDbContext))]
    [Migration("20220910211340_FixUserAccountRelationship")]
    partial class FixUserAccountRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("APSS.Domain.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Permissions")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialStatus")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("APSS.Domain.Entities.AnimalGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OwnedById")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnedById");

                    b.ToTable("AnimalGroups");
                });

            modelBuilder.Entity("APSS.Domain.Entities.AnimalProductUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnimalProductUnits");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AddedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LivingLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("APSS.Domain.Entities.FamilyIndividual", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<long>("IndividualId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProvider")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("IndividualId");

                    b.ToTable("FamilyIndividuals");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Individual", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AddedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("SocialStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Land", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Area")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OwnedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnedById");

                    b.ToTable("Lands");
                });

            modelBuilder.Entity("APSS.Domain.Entities.LandProductUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LandProductUnits");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("APSS.Domain.Entities.LogTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogTags");
                });

            modelBuilder.Entity("APSS.Domain.Entities.MultipleChoiceAnswerItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MultipleChoiceQuestionAnswerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MultipleChoiceQuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionAnswerId");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceAnswerItems");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AddedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("APSS.Domain.Entities.ProductExpense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<long>("SpentOnId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SpentOnId");

                    b.ToTable("ProductExpenses");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");
                });

            modelBuilder.Entity("APSS.Domain.Entities.QuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SurveyEntryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyEntryId");

                    b.ToTable("QuestionAnswers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("QuestionAnswer");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BelongsToId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BelongsToId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Survey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("APSS.Domain.Entities.SurveyEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("MadeById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MadeById");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyEntries");
                });

            modelBuilder.Entity("APSS.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AccessLevel")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SupervisedById")
                        .HasColumnType("bigint");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupervisedById");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Voluntary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OfferedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OfferedById");

                    b.ToTable("Volantaries");
                });

            modelBuilder.Entity("LogLogTag", b =>
                {
                    b.Property<long>("LogsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("LogsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("LogLogTag");
                });

            modelBuilder.Entity("APSS.Domain.Entities.AnimalProduct", b =>
                {
                    b.HasBaseType("APSS.Domain.Entities.Product");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("PeriodTaken")
                        .HasColumnType("time");

                    b.Property<long>("ProducerId")
                        .HasColumnType("bigint")
                        .HasColumnName("AnimalProduct_ProducerId");

                    b.Property<double>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("AnimalProduct_Quantity");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("AnimalProduct_UnitId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("UnitId");

                    b.HasDiscriminator().HasValue("AnimalProduct");
                });

            modelBuilder.Entity("APSS.Domain.Entities.LandProduct", b =>
                {
                    b.HasBaseType("APSS.Domain.Entities.Product");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CropName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fertilizer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HarvestEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HarvestStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasGreenhouse")
                        .HasColumnType("bit");

                    b.Property<string>("Insecticide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("IrrigationCount")
                        .HasColumnType("float");

                    b.Property<string>("IrrigationMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IrrigationPowerSource")
                        .HasColumnType("int");

                    b.Property<int>("IrrigationWaterSource")
                        .HasColumnType("int");

                    b.Property<bool>("IsGovernmentFunded")
                        .HasColumnType("bit");

                    b.Property<long>("ProducedInId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProducerId")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("StoringMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasIndex("ProducedInId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("UnitId");

                    b.HasDiscriminator().HasValue("LandProduct");
                });

            modelBuilder.Entity("APSS.Domain.Entities.LogicalQuestion", b =>
                {
                    b.HasBaseType("APSS.Domain.Entities.Question");

                    b.HasDiscriminator().HasValue("LogicalQuestion");
                });

            modelBuilder.Entity("APSS.Domain.Entities.LogicalQuestionAnswer", b =>
                {
                    b.HasBaseType("APSS.Domain.Entities.QuestionAnswer");

                    b.Property<bool?>("Answer")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("LogicalQuestionAnswer");
                });

            modelBuilder.Entity("APSS.Domain.Entities.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("APSS.Domain.Entities.Question");

                    b.Property<bool>("CanMultiSelect")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("APSS.Domain.Entities.MultipleChoiceQuestionAnswer", b =>
                {
                    b.HasBaseType("APSS.Domain.Entities.QuestionAnswer");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestionAnswer");
                });

            modelBuilder.Entity("APSS.Domain.Entities.TextQuestion", b =>
                {
                    b.HasBaseType("APSS.Domain.Entities.Question");

                    b.HasDiscriminator().HasValue("TextQuestion");
                });

            modelBuilder.Entity("APSS.Domain.Entities.TextQuestionAnswer", b =>
                {
                    b.HasBaseType("APSS.Domain.Entities.QuestionAnswer");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextQuestionAnswer_Answer");

                    b.HasDiscriminator().HasValue("TextQuestionAnswer");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Account", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APSS.Domain.Entities.AnimalGroup", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "OwnedBy")
                        .WithMany()
                        .HasForeignKey("OwnedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnedBy");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Family", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("APSS.Domain.Entities.FamilyIndividual", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Family", "Family")
                        .WithMany("Individuals")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APSS.Domain.Entities.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Individual", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Land", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "OwnedBy")
                        .WithMany()
                        .HasForeignKey("OwnedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnedBy");
                });

            modelBuilder.Entity("APSS.Domain.Entities.MultipleChoiceAnswerItem", b =>
                {
                    b.HasOne("APSS.Domain.Entities.MultipleChoiceQuestionAnswer", null)
                        .WithMany("Answers")
                        .HasForeignKey("MultipleChoiceQuestionAnswerId");

                    b.HasOne("APSS.Domain.Entities.MultipleChoiceQuestion", null)
                        .WithMany("CandidateAnswers")
                        .HasForeignKey("MultipleChoiceQuestionId");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Product", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("APSS.Domain.Entities.ProductExpense", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Product", "SpentOn")
                        .WithMany("Expenses")
                        .HasForeignKey("SpentOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpentOn");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Question", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("APSS.Domain.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APSS.Domain.Entities.SurveyEntry", null)
                        .WithMany("Answers")
                        .HasForeignKey("SurveyEntryId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Session", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Skill", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Individual", "BelongsTo")
                        .WithMany("Skills")
                        .HasForeignKey("BelongsToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BelongsTo");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Survey", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("APSS.Domain.Entities.SurveyEntry", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "MadeBy")
                        .WithMany()
                        .HasForeignKey("MadeById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APSS.Domain.Entities.Survey", "Survey")
                        .WithMany("Entries")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MadeBy");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("APSS.Domain.Entities.User", b =>
                {
                    b.HasOne("APSS.Domain.Entities.User", "SupervisedBy")
                        .WithMany("SubUsers")
                        .HasForeignKey("SupervisedById");

                    b.Navigation("SupervisedBy");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Voluntary", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Individual", "OfferedBy")
                        .WithMany("Voluntary")
                        .HasForeignKey("OfferedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfferedBy");
                });

            modelBuilder.Entity("LogLogTag", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Log", null)
                        .WithMany()
                        .HasForeignKey("LogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APSS.Domain.Entities.LogTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APSS.Domain.Entities.AnimalProduct", b =>
                {
                    b.HasOne("APSS.Domain.Entities.AnimalGroup", "Producer")
                        .WithMany("Products")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APSS.Domain.Entities.AnimalProductUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("APSS.Domain.Entities.LandProduct", b =>
                {
                    b.HasOne("APSS.Domain.Entities.Season", "ProducedIn")
                        .WithMany()
                        .HasForeignKey("ProducedInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APSS.Domain.Entities.Land", "Producer")
                        .WithMany("Products")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APSS.Domain.Entities.LandProductUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProducedIn");

                    b.Navigation("Producer");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("APSS.Domain.Entities.AnimalGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Family", b =>
                {
                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Individual", b =>
                {
                    b.Navigation("Skills");

                    b.Navigation("Voluntary");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Land", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Product", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("APSS.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("APSS.Domain.Entities.SurveyEntry", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("APSS.Domain.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("SubUsers");
                });

            modelBuilder.Entity("APSS.Domain.Entities.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("CandidateAnswers");
                });

            modelBuilder.Entity("APSS.Domain.Entities.MultipleChoiceQuestionAnswer", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
